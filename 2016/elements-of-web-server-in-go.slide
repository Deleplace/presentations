Elements of Web Server (in go)
30 Jun 2016

Valentin Deleplace
Developer

* Warning

Some code will be displayed.

* Cross-compilation

* Cross-compilation

This is the compilation script of one of our tools *patapon*, run from my linux workstation:

	env GOOS=darwin  GOARCH=amd64 go build -o target/osx64/patapon
	env GOOS=windows GOARCH=amd64 go build -o target/win64/patapon.exe
	env GOOS=linux   GOARCH=amd64 go build -o target/linux64/patapon

That's it. To ship, copy the 3 executables to shared folder.

Executables are statically linked.

* First-class functions, and closures 

* Simple chronometer

	t := time.Now()

	fetchData()

	duration := time.Since(t)

* Simple chronometer: with func argument

	duration := clock(fetchData)
 
	func clock(f func()) time.Duration {
		t := time.Now()
		f()
		return time.Since(t)
	}

# Presenter notes not working properly because my present binary has no flag -notes ??
# This is similar to Javascript closure, but with compile-time safety.
# This is similar to Java Runnables and Callables, but requires less boilerplate.

* Chronometer: time a block of code?

	t := time.Now()

	for _, r := range resources {
		fetch(r)
	}

	duration := time.Since(t)

* Wrap code in a closure

	duration := clock(func() {
		for _, r := range resources {
			fetch(r)
		}
	})

* Fork/Join


* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent.go HLdecl

You may often write such code to fit your needs.

* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent.go HLdecl

Func arguments (variadic)

* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent.go HLwg

Use a `sync.WaitGroup` to join at completion

Important: call `wg.add` _before_ spawning the goroutines

* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent.go HLtrap

Must bind to a new variable at each loop iteration 

* Serial exec

.play ./elements-of-web-server-in-go/serialexec.go  /START OMIT/,/END OMIT/

.image ./elements-of-web-server-in-go/waterfall-serial.png

* Concurrent exec

	RunConcurrent(
		profile,
		news,
		weather,
	)

.image ./elements-of-web-server-in-go/waterfall-concurrent.png

It is straightforward and convenient, but be very careful with concurrency!

* What if my services don't have the same signature?


	func profile(username string) error {...}

	func news() {...}

	func weather(city string, day time.Time) {...}

* Wrap in closures

	RunConcurrent(
		func() { perr = profile(currentuser) },
		news,
		func() { weather(city, time.Now()) },
	)

- Closures can *read* variables from outside their body
- Closures can *write* variables from outside their body

* Warning


Concurrency and parallelism are *hard* and *subtle*.

They are made easier in go, but there is still plenty of room to shoot self in the foot.

.image ./elements-of-web-server-in-go/plane_right.jpg _ 600

* Testing and data races

* A simple server : hit counter

	package main

	import "net/http"

	func main() {
		http.HandleFunc("/", h)
		http.ListenAndServe(":7070", nil)
	}

	var count int = 0

	func h(w http.ResponseWriter, r *http.Request) {
		count++
	}

* Test the handler concurrently


	func TestHandler(t *testing.T) {
		count = 0
		for i := 0; i < 200; i++ {
			go h(nil, nil)
		}

		time.Sleep(3 * time.Second)
		if count != 200 {
			t.Errorf("Expected %d hits, got %d", 200, count)
		}
	}
 
	go test
	PASS
	ok
 
	go test
	--- FAIL: TestHandler (3.00s)
		racy_handler_test.go:16: Expected 200 hits, got 194
	FAIL


* Use the built-in race detector

	go test -race

	==================
	WARNING: DATA RACE
	Read by goroutine 8:
	  racy_server.go:13 +0x30

	Previous write by goroutine 7:
	  racy_server.go:13 +0x4c

	Goroutine 8 (running) created at:
	  racy_handler_test.go:12 +0x86
	  testing.tRunner()
	      /usr/local/go/src/testing/testing.go:473 +0xdc

	Goroutine 7 (finished) created at:
	  racy_handler_test.go:12 +0x86
	  testing.tRunner()
	      /usr/local/go/src/testing/testing.go:473 +0xdc
	==================
	--- FAIL: TestHandler (3.01s)
	racy_handler_test.go:16: Expected 200 hits, got 162
	FAIL


* Test the server concurrently


	func TestServer(t *testing.T) {
		count = 0
		go main()
		for i := 0; i < 200; i++ {
			go http.Get("http://localhost:7070/")
		}

		time.Sleep(3 * time.Second)
		if count != 200 {
			t.Errorf("Expected %d hits, got %d", 200, count)
		}
	}

* Use -race in production

- if you have many servers, enable race detector on one of them

- or enable it on your server for a few hours

Overhead : measure the performance penalty. It might be acceptable (e.g. +100%, +200%). Find as many concurrency bugs as possible.

* Links : standard library

.link https://golang.org/pkg/net/http/ Package *net/http*

very good for a wide range of HTTP servers needs

.link https://golang.org/pkg/sync/ Package *sync*

includes WaitGroup, Mutex, etc.

.link https://golang.org/pkg/text/template/ Package *text/template*
.link https://golang.org/pkg/html/template/ Package *html/template*

efficient (compiled) and safe templating.

* Links : misc

.link http://go-traps.appspot.com/ Go-Traps

.link https://software.intel.com/en-us/blogs/2013/01/06/benign-data-races-what-could-possibly-go-wrong Benign data races: what could possibly go wrong?

.link https://blog.golang.org/race-detector Introducing the Go Race Detector