Elements of Web Server, Concurrency and Tooling in Go
2019-07-04

Valentin Deleplace
Happy path engineer for Google Cloud Platform
@val_deleplace

* Warning

Some code will be displayed.

* Overview of Go

.background ./elements-of-web-server-in-go/hello.go.png

* History

- Designed at Google in 2007
- Version 1.0 released in 2012
- Version 1.12 released in 2019

* Runtime

- Compiled to native code
- Statically typed
- Garbage collector
- Scheduler
- Not a VM

* What Go is for

.image ./elements-of-web-server-in-go/What-Go-is-for.svg

* Paradigms

Imperative?

- Yes.

Functional? 

- No.

Object-oriented? 

- No.

Generics? 

- No.

* Principles

Simplicity

- Each language feature should be easy to understand.

Readability

- Code should be comprehensible with little context.

Orthogonality

- Go‚Äôs features should interact in predictable and consistent ways.
- Types ‚àü Functions ‚àü Goroutines ‚àü Channels ‚àü ...

* Gofmt

Unique code formatter

Nobody arguing about code formatting

.background ./elements-of-web-server-in-go/mindblown.png

* Goals

- Simplicity
- *Scalability*
- Stability: Go 1 compatibility promise
- Memory safety
- Good concurrency
- Good networking

* Genericity

- No user-defined generic types
- Built-in types *slice*, *map*, *chan* are generic
- *Interfaces* for generic behavior

.background ./elements-of-web-server-in-go/Invoice.png

* Objects

- No class inheritance (no OOP)
- Methods
- Composition, embedding
- Interfaces implicitly implemented

.code ./elements-of-web-server-in-go/io.Reader.go

.code ./elements-of-web-server-in-go/gzip.Reader.go

* Concurrency

- Excellent support
- Goroutines are lighweight threads
- Message passing through channels

.image ./elements-of-web-server-in-go/channel.jpg

* Network

- Excellent standard library
- Creating a server is straightforward

* Memory safety

- Bound checking
- Pointers
- ...but no pointer arithmetic
- Automatic garbage collection
- Avoids a large class of *bugs*
- Avoids a large class of *security* *leaks* 

* Tradeoff

.image ./elements-of-web-server-in-go/Language-speed-tradeoff.svg

* Packages

No cyclic dependency

.background ./elements-of-web-server-in-go/Package-dependency.svg

* Package management until 2018

No versioning

Breaking change == Make a new package for v2

Vendoring

* Modules

Added in 2018

Semantic Versioning

Reproducible builds

Proxy (Athens)


* Cross-compilation

.background ./elements-of-web-server-in-go/background-gopher-top-right.png

* Cross-compilation

This is the compilation script of one of our tools *patapon*, run from my linux workstation:

	env GOOS=darwin  GOARCH=amd64 go build -o target/osx64/patapon
	env GOOS=windows GOARCH=amd64 go build -o target/win64/patapon.exe
	env GOOS=linux   GOARCH=amd64 go build -o target/linux64/patapon

*That's*it.*

To ship, copy the 3 executables to shared folder.

Executables are statically linked.

* First-class functions, and closures

.background ./elements-of-web-server-in-go/background-gopher-top-right.png

* Simple chronometer

	t := time.Now()

	fetchData()

	duration := time.Since(t)

.link https://play.golang.org/p/2Y3w9zJRVcO üê≠

* Simple chronometer: with func argument

	duration := clock(fetchData)

	func clock(f func()) time.Duration {
		t := time.Now()
		f()
		return time.Since(t)
	}

.link https://play.golang.org/p/Q8GmtvS3PI2 üê≠

# Presenter notes not working properly because my present binary has no flag -notes ??
# This is similar to Javascript closure, but with compile-time safety.
# This is similar to Java Runnables and Callables, but requires less boilerplate.

* Chronometer: time a block of code?

	t := time.Now()

	for _, r := range resources {
		fetch(r)
	}

	duration := time.Since(t)

* Wrap code in a closure

	duration := clock(func() {
		for _, r := range resources {
			fetch(r)
		}
	})

.link https://play.golang.org/p/oA5Zn1Wfzrv üê≠

* Fork/Join

.background ./elements-of-web-server-in-go/background-gopher-top-right.png

* Serial execution

.play ./elements-of-web-server-in-go/abcde_serialexec.go /START OMIT/,/END OMIT/

.link https://play.golang.org/p/rvnHfKAkRL6 üê≠

You have 5 tasks A, B, C, D, E.

* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent.go HLdecl

You may often write such code to fit your needs.

* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent.go HLdecl

Func arguments (variadic)

* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent.go HLwg

Use a `sync.WaitGroup` to join at completion

Important: call `wg.Add` _before_ spawning the goroutines

.play ./elements-of-web-server-in-go/abcde_concurrentexec_bug.go /START OMIT/,/END OMIT/

.link https://play.golang.org/p/fek68ng5lN_8 üê≠

* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent-fix1.go HLtrap

Must bind to a new variable at each loop iteration

.play ./elements-of-web-server-in-go/abcde_concurrentexec_fix1.go /START OMIT/,/END OMIT/

.link https://play.golang.org/p/QbBtD-ZFz7G üê≠

* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent-fix2.go HLtrap

.link https://play.golang.org/p/TKm_gzkWB8M üê≠

Must bind to a new variable at each loop iteration

* Utility goroutine spawner

.code ./elements-of-web-server-in-go/runconcurrent-fix3.go HLtrap

.link https://play.golang.org/p/vO_sYy7v67i üê≠

Must bind to a new variable at each loop iteration

* Example: page blocks from data sources

.image ./elements-of-web-server-in-go/aggregate_page.png 580 _

* Serial exec

.play ./elements-of-web-server-in-go/serialexec.go  /START OMIT/,/END OMIT/

.link https://play.golang.org/p/zFJuKIt0Zdi üê≠

.image ./elements-of-web-server-in-go/waterfall-serial.png

* Concurrent exec

.play ./elements-of-web-server-in-go/concurrentexec.go  /START OMIT/,/END OMIT/

.link https://play.golang.org/p/mjoxylCbTpX üê≠

.image ./elements-of-web-server-in-go/waterfall-concurrent.png

It is straightforward and convenient, but be very careful with concurrency!

* What if my services don't have the same signature?


	func profile(username string) error {...}

	func news() {...}

	func weather(city string, day time.Time) {...}

* Wrap in closures

	RunConcurrent(
		func() { perr = profile(currentuser) },
		news,
		func() { weather(city, time.Now()) },
	)

.link https://play.golang.org/p/4RcpneYjNd6 üê≠

- Closures can *read* variables from outside their body
- Closures can *write* variables from outside their body

* Warning


Concurrency and parallelism are *hard* and *subtle*.

They are made easier in go, but there is still plenty of room to shoot self in the foot.

.image ./elements-of-web-server-in-go/plane_right.jpg _ 600

* Testing and data races

.background ./elements-of-web-server-in-go/background-gopher-top-right.png

* A simple server : hit counter

	package main

	import "net/http"

	func main() {
		http.HandleFunc("/", h)
		http.ListenAndServe(":7070", nil)
	}

	var count int = 0

	func h(w http.ResponseWriter, r *http.Request) {
		count++
	}

* Test the handler concurrently


	func TestHandler(t *testing.T) {
		count = 0
		for i := 0; i < 200; i++ {
			go h(nil, nil)
		}

		time.Sleep(3 * time.Second)
		if count != 200 {
			t.Errorf("Expected %d hits, got %d", 200, count)
		}
	}

	$ go test
	PASS
	ok

	$ go test
	--- FAIL: TestHandler (3.00s)
		racy_handler_test.go:16: Expected 200 hits, got 194
	FAIL


* Use the built-in race detector

	$ go test -race

	==================
	WARNING: DATA RACE
	Read by goroutine 8:
	  racy_server.go:13 +0x30

	Previous write by goroutine 7:
	  racy_server.go:13 +0x4c

	Goroutine 8 (running) created at:
	  racy_handler_test.go:12 +0x86
	  testing.tRunner()
	      /usr/local/go/src/testing/testing.go:473 +0xdc

	Goroutine 7 (finished) created at:
	  racy_handler_test.go:12 +0x86
	  testing.tRunner()
	      /usr/local/go/src/testing/testing.go:473 +0xdc
	==================
	--- FAIL: TestHandler (3.01s)
	racy_handler_test.go:16: Expected 200 hits, got 162
	FAIL


* Test the server concurrently


	func TestServer(t *testing.T) {
		count = 0
		go main()
		for i := 0; i < 200; i++ {
			go http.Get("http://localhost:7070/")
		}

		time.Sleep(3 * time.Second)
		if count != 200 {
			t.Errorf("Expected %d hits, got %d", 200, count)
		}
	}

* Use -race in production

- if you have many servers, enable race detector on one of them

- or enable it on your server for a few hours

Overhead : measure the performance penalty. It might be acceptable (e.g. +100%, +200%). Find as many concurrency bugs as possible.

* Benchmarks

.background ./elements-of-web-server-in-go/background-gopher-top-right.png

* Benchmarks

In foobar_test.go :

	func BenchmarkDoThis(b *testing.B) {
		for i := 0; i < b.N; i++ {
			DoThis()
		}
	}

	func BenchmarkDoThat(b *testing.B) {
		for i := 0; i < b.N; i++ {
			DoThat()
		}
	}

* Benchmarks

	func BenchmarkDoThis(b *testing.B) {
		for i := 0; i < b.N; i++ {
			DoThis()
		}
	}

	func BenchmarkDoThat(b *testing.B) {
		for i := 0; i < b.N; i++ {
			DoThat()
		}
	}

 

	$ go test -bench=.

* Benchmarks

	func BenchmarkDoThis(b *testing.B) {
		for i := 0; i < b.N; i++ {
			DoThis()
		}
	}

	func BenchmarkDoThat(b *testing.B) {
		for i := 0; i < b.N; i++ {
			DoThat()
		}
	}

	$ go test -bench=.

	goos: linux
	goarch: amd64
	BenchmarkDoThis-12          50000             27753 ns/op
	BenchmarkDoThat-12          30000             51876 ns/op
	PASS
	ok      _/.../foobar   3.716s


* Pprof

.background ./elements-of-web-server-in-go/background-gopher-top-right.png

* Pprof

- CPU profiler

- Memory profiler

- Find and visualize bottlenecks

Easy to use:

	$ go test -cpuprofile cpu.prof

Then inspect the profile data (it's a file).

* Example: Equal Sums

Problem from _Google_ _Code_ _Jam_ 2012 : ‚ùùFind 2 subsets having same sum‚ùû

.image ./elements-of-web-server-in-go/equal_sums_input.png _ 400

* Example: Equal Sums

Problem from _Google_ _Code_ _Jam_ 2012 : ‚ùùFind 2 subsets having same sum‚ùû

.image ./elements-of-web-server-in-go/equal_sums_solution.png _ 400

* Example: Equal Sums

Problem from _Google_ _Code_ _Jam_ 2012 : ‚ùùFind 2 subsets having same sum‚ùû

.image ./elements-of-web-server-in-go/equal_sums_solution.png _ 400

Nice algorithm uses :

- random

- hashmap

* Pprof CPU profile

.image ./elements-of-web-server-in-go/pprof_graph.png _ 1024

* Pprof CPU profile

.image ./elements-of-web-server-in-go/pprof_graph_rand.png _ 1024

* Pprof CPU profile

.image ./elements-of-web-server-in-go/pprof_graph_map.png _ 1024

* Pprof memory profile

.image ./elements-of-web-server-in-go/pprof_heap_memory_graph.jpg _ 1024

* Pprof for your webapp

In your code :

	import _ "net/http/pprof"

Side-effect:

- registers HTTP handlers under /debug/pprof/
- you can now retrieve live Pprof data

E.g. to look at a 30-second CPU profile:

	go tool pprof http://localhost:6060/debug/pprof/profile

* expvar

.background ./elements-of-web-server-in-go/background-gopher-top-right.png

* expvar

Expose public variables, for debug

	import _ "expvar"

Side-effect: memory stats are exposed at path /debug/vars

Add a custom exposed var :

	var served = expvar.NewInt("served")

* Links : standard library

.link https://golang.org/pkg/net/http/ Package *net/http*

very good for a wide range of HTTP server needs

.link https://golang.org/pkg/sync/ Package *sync*

includes WaitGroup, Mutex, etc.

.link https://golang.org/pkg/text/template/ Package *text/template*
.link https://golang.org/pkg/html/template/ Package *html/template*

efficient (compiled) and safe templating.

* Links : misc

.link http://go-traps.appspot.com/ Go-Traps

.link https://software.intel.com/en-us/blogs/2013/01/06/benign-data-races-what-could-possibly-go-wrong Benign data races: what could possibly go wrong?

.link https://blog.golang.org/race-detector Introducing the Go Race Detector

.link https://talks.golang.org/2013/advconc.slide Advanced Go Concurrency Patterns

.link https://talks.golang.org/2013/highperf.slide High Performance Apps with Go on App Engine

.link https://talks.golang.org/2016/applicative.slide Program your next server in Go

.link https://go-proverbs.github.io/ Go Proverbs

.link https://medium.com/@val_deleplace/go-code-refactoring-the-23x-performance-hunt-156746b522f7 Go code refactoring : the 23x performance hunt

.background ./elements-of-web-server-in-go/background_QR-useful-links.png

* Cloud

.background ./elements-of-web-server-in-go/background-gopher-top-right.png

* Public clouds

.background ./elements-of-web-server-in-go/Go_in_the_clouds.png

.link https://raw.githubusercontent.com/Deleplace/presentations/master/2018/09/21/elements-of-web-server-in-go/Go_in_the_clouds.png Many options :)

* Exercises

.link https://play.golang.org/p/PRLrLX0JrZR Challenge 0
.link https://play.golang.org/p/r54cQeWm5Ef Challenge 1
.link https://play.golang.org/p/1CBt-rDGtHT Challenge 2
.link https://play.golang.org/p/jbp2LIqknuE Challenge 3
.link https://play.golang.org/p/93Pq07PE4U2 Challenge 4

* Contact

.background ./elements-of-web-server-in-go/background_QR-twitter.png

Twitter @val_deleplace

Medium @val_deleplace

GitHub @Deleplace
